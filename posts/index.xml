<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on bcoughlan&#39;s dev blog</title>
    <link>https://bcoughlan.github.io/posts/</link>
    <description>Recent content in Posts on bcoughlan&#39;s dev blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 May 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bcoughlan.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git detective cheatsheet</title>
      <link>https://bcoughlan.github.io/posts/git-detective-cheatsheet/</link>
      <pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bcoughlan.github.io/posts/git-detective-cheatsheet/</guid>
      <description>Here is a little collection of Git tricks for tracking down changes in a codebase. These can help you find when and why a change was made, who to reach out to with a problem, and how to trace the change back to a PR and other discussions.
General tip: using the pager Git uses less as a pager by default. less has a lot useful vim-like commands for navigating the output, like / for search, G to go to the end.</description>
    </item>
    
    <item>
      <title>Don&#39;t mock the database</title>
      <link>https://bcoughlan.github.io/posts/dont-mock-the-database/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bcoughlan.github.io/posts/dont-mock-the-database/</guid>
      <description>Up until the 2010s the vast majority of applications were deployed on-premises to companies who employed dedicated DBAs and operations staff to manage their preferred database. Developers needed to write SQL that would work on Oracle, MySQL and SQL Server as well as being able to mock out the database with something like H2 to write tests and run locally, because it was not easy or cheap to run a database on your local machine.</description>
    </item>
    
    <item>
      <title>Kubernetes workers are not immune to master failures</title>
      <link>https://bcoughlan.github.io/posts/kubernetes-master-fail/</link>
      <pubDate>Sat, 22 Feb 2020 01:51:37 +0000</pubDate>
      
      <guid>https://bcoughlan.github.io/posts/kubernetes-master-fail/</guid>
      <description>There is some consensus floating around that Kubernetes worker applications can continue to function when the master is down:
Stack Overflow: What happens when the Kubernetes master fails (August 2016)
 It&amp;rsquo;s my understanding that the master runs the API, and &amp;hellip; when it is offline &amp;hellip; life for applications will continue as normal unless nodes are rebooted, or there is a dramatic failure of some sort during this time, because TCP/ UDP services, load balancers, DNS, the dashboard, etc.</description>
    </item>
    
  </channel>
</rss>